{
    "snippets" : [
        {
            "name": "Initialize Notebook",
            "code": [
                "%run /Users/denis/Documents/Projects/jupyter-notebook/notebook-generator/library/v0.2/init.ipy",
                "#HTML('''<script>code_show=true; function code_toggle() { if (code_show){ $('div.input').hide(); } else { $('div.input').show(); } code_show = !code_show} $( document ).ready(code_toggle);</script><form action='javascript:code_toggle()'><input type='submit' value='Toggle Code'></form>''')"
            ]
        },
        {
            "name": "Load Dataset",
            "code": [
                "# Load dataset",
                "dataset = load_dataset(gse='GSE30017', source='archs4')",
                "",
                "# Preview expression data",
                "dataset['rawdata'].head()"
            ]
        },
        {
            "name": "Display Metadata",
            "code": [
                "# Show sample metadata",
                "dataset['sample_metadata']"
            ]
        },
        {
            "name": "Normalize Dataset",
            "code": [
                "# Select method",
                "normalization_methods = ['zscore', 'vst', 'quantile'] # zscore, vst, quantile",
                "",
                "# Normalize dataset",
                "for normalization_method in normalization_methods:",
                "    dataset[normalization_method] = normalize_dataset(dataset=dataset, method=normalization_method)"
            ]
        },
        {
            "name": "Get Groups",
            "code": [
                "# Get Sample Groups",
                "group_samples_by = ['']",
                "groups = dataset['sample_metadata'].reset_index().groupby(group_samples_by)['samples'].apply(list).to_dict()",
                "groups"
            ]
        },
        {
            "name": "Define Signatures",
            "code": [
                "# Define Signatures",
                "signature_metadata = {\n    'AvB': {'A': [], 'B': []}\n}"
            ]
        },
        {
            "name": "Generate Signatures",
            "code": [
                "# Generate Signatures",
                "for signature_label, groups in signature_metadata.items():",
                "    print('Generating {} signature...'.format(signature_label))",
                "    try:",
                "        signatures[signature_label] = generate_signature(group_A=groups['A'], group_B=groups['B'], method='cd', dataset=dataset)",
                "    except:",
                "        print('Error generating signature.')"
            ]
        },
        {
            "name": "Library Size Analysis",
            "code": [
                "# Get Library Sizes",
                "results['library_sizes'] = analyze(dataset=dataset, tool = 'library_sizes')",
                "",
                "# Plot Results",
                "plot(results['library_sizes'])"
            ]
        },
        {
            "name": "PCA",
            "code": [
                "# Run PCA",
                "results['pca'] = analyze(dataset=dataset, tool = 'pca')",
                "",
                "# Plot Results",
                "plot(results['pca'])"
            ]
        },
        {
            "name": "Heatmap",
            "code": [
                "# Generate Heatmap",
                "results['heatmap'] = analyze(dataset=dataset, tool = 'heatmap')",
                "",
                "# Plot Results",
                "plot(results['heatmap'])"
            ]
        },
        {
            "name": "Clustergrammer",
            "code": [
                "# Generate Clustergram",
                "results['clustergrammer'] = analyze(dataset=dataset, tool = 'clustergrammer')",
                "",
                "# Plot Results",
                "plot(results['clustergrammer'])"
            ]
        },
        {
            "name": "Signature Table",
            "code": [
                "# Get Signature Table",
                "results['signature_table'] = analyze(signature=signature, tool = 'signature_table', topN = False)",
                "",
                "# Plot Results",
                "plot(results['signature_table'])"
            ]
        },
        {
            "name": "Volcano Plot",
            "code": [
                "# Get Volcano Plot",
                "results['volcano_plot'] = analyze(signature=signature, tool = 'volcano_plot')",
                "",
                "# Plot Results",
                "plot(results['volcano_plot'])"
            ]
        },
        {
            "name": "MA Plot",
            "code": [
                "# Get MA Plot",
                "results['ma_plot'] = analyze(signature=signature, tool = 'ma_plot')",
                "",
                "# Plot Results",
                "plot(results['ma_plot'])"
            ]
        },
        {
            "name": "Enrichr",
            "code": [
                "# Run Enrichr",
                "results['enrichr'] = {}",
                "for signature_label, signature in signatures.items():",
                "    results['enrichr'][signature_label] = analyze(signature=signature, tool = 'enrichr', signature_label=signature_label)",
                "",
                "    # Plot Results",
                "    plot(results['enrichr'][signature_label])"
            ]
        },
        {
            "name": "L1000CDS2",
            "code": [
                "# Run L1000CDS2",
                "results['l1000cds2'] = {}",
                "for signature_label, signature in signatures.items():",
                "    results['l1000cds2'][signature_label] = analyze(signature=signature, tool = 'l1000cds2', signature_label=signature_label)",
                "",
                "    # Plot Results",
                "    plot(results['l1000cds2'][signature_label])"
            ]
        }
    ]
}